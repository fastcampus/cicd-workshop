steps:
### Build
  - id: 'build'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          docker build -t gcr.io/$PROJECT_ID/gceme:$BUILD_ID .
### Test
### Publish
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          docker push gcr.io/$PROJECT_ID/gceme:$BUILD_ID
### Deploy
  - id: 'deploy'
    name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/kube/config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}
          PROJECT=$$(gcloud config get-value core/project)
          ZONE=${_CLOUDSDK_COMPUTE_ZONE}
          gcloud container clusters get-credentials "$${CLUSTER}" \
            --project "$${PROJECT}" \
            --region "$${ZONE}"
          sed -i 's|gcr.io/cloud-solutions-images/gceme:.*|gcr.io/$PROJECT_ID/gceme:$BUILD_ID|' ./kubernetes/deployments/prod/*.yaml

          kubectl get ns production || kubectl create ns production
          kubectl apply --namespace production --recursive -f kubernetes/deployments/prod
          kubectl apply --namespace production --recursive -f kubernetes/services
### Clean GCR Images
  - id: 'clean gcr'
    name: 'gcr.io/cloud-builders/gcloud'
    env:
      - '_IMG_KEEP=${_IMG_KEEP}'
    entrypoint: 'bash'
    args:
      - '-c'
      - |

        set -e

        apt update && apt install -y jq



        image="gcr.io/$PROJECT_ID/gceme"

        number_keep_images=${_IMG_KEEP}

        c=0

        date=$(gcloud container images list-tags $image --limit=unlimited \
          --sort-by=~TIMESTAMP --format=json | TZ=/usr/share/zoneinfo/UTC jq -r '.['$number_keep_images'].timestamp.datetime | sub("(?<before>.*):"; .before ) | strptime("%Y-%m-%d %H:%M:%S%z") | mktime | strftime("%Y-%m-%d")')

        echo ${date}

        for digest in $(gcloud container images list-tags $image --limit=unlimited --sort-by=~TIMESTAMP \
          --filter="timestamp.datetime < '${date}'" --format='get(digest)'); do
           (
              set -x
              gcloud container images delete -q --force-delete-tags "${image}@${digest}"
            )
            c=c+1
        done

        echo "Deleted ${c} images for ${image}." >&2
